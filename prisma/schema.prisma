// ---------- GENERATOR / DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum Role {
  ADMIN
  USER
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  LAPSED
  CANCELLED
  EXPIRED
}

enum PersonType {
  PF
  PJ
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
}

// Health
enum BeneficiarioTipo {
  TITULAR
  FILHO
  CONJUGE
}

enum BeneficiarioStatus {
  ATIVO
  INATIVO
}

// üëá NOVOS: para regras/pr√≥-rata e movimentos
enum RegimeCobranca {
  MENSAL
  DIARIO
}

enum MotivoMovimento {
  INCLUSAO
  EXCLUSAO
  ALTERACAO
  NENHUM
}

// ---------- CORE ----------
model Corretor {
  id         String   @id @default(cuid())
  name       String
  cpfCnpj    String   @unique
  email      String   @unique @db.Citext
  phone      String?
  subdomain  String   @unique
  slug       String   @unique
  tenantCode String?  @unique @db.VarChar(16)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users    User[]
  clients  Client[]
  policies Policy[] @relation("PolicyCorretor")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @db.Citext
  passwordHash String
  role         Role   @default(USER)

  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  refreshTokenHash String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([corretorId, email]) // e-mail √∫nico por tenant
  @@index([corretorId])
  @@index([refreshTokenHash])
  @@index([email])
}

model Client {
  id         String   @id @default(cuid())
  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  name      String
  email     String?   @db.Citext
  document  String?   @db.VarChar(32)
  phone     String?   @db.VarChar(32)
  birthDate DateTime?
  notes     String?

  personType PersonType   @default(PF)
  status     ClientStatus @default(ACTIVE)

  // LEGADO (a ser descontinuado ap√≥s migra√ß√£o para tags normalizadas):
  tags       String[]     @default([])

  // endere√ßo (legado)
  addressZip        String?
  addressStreet     String?
  addressNumber     String?
  addressComplement String?
  addressDistrict   String?
  addressCity       String?
  addressState      String?
  addressCountry    String? @default("BR")

  // contato principal (legado)
  primaryContactName  String?
  primaryContactRole  String?
  primaryContactEmail String?
  primaryContactPhone String?
  primaryContactNotes String?

  // PF extras
  pfRg            String?
  pfMaritalStatus String?
  pfProfession    String?
  pfIsPEP         Boolean?

  // PJ extras
  pjCorporateName         String?
  pjTradeName             String?
  pjCnpj                  String?
  pjStateRegistration     String?
  pjMunicipalRegistration String?
  pjCNAE                  String?
  pjFoundationDate        DateTime?
  pjRepName               String?
  pjRepCpf                String?
  pjRepEmail              String?
  pjRepPhone              String?

  preferences    Json?
  marketingOptIn Boolean @default(false)
  privacyConsent Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // <‚Äî Soft delete

  policies       Policy[]          @relation("PolicyClient")
  beneficiarios  Beneficiario[]
  regrasCobranca RegraCobranca[]
  faturas        FaturaImportada[]

  // NORMALIZA√á√ÉO (Fase A)
  addresses Address[]
  contacts  Contact[]

  // NOVO: rela√ß√µes normalizadas de servi√ßos e tags
  services ClientService[]   // many-to-many com Service
  tagLinks ClientTag[]       // many-to-many com Tag (nome escolhido para n√£o colidir com tags[] legado)

  // NOVO: v√≠nculo com planos (tabela pivot)
  healthPlans ClientHealthPlan[]

  // NOVO: hist√≥rico de erros de importa√ß√£o
  importErrors BeneficiarioImportError[]

  @@unique([corretorId, id])
  // ‚ö†Ô∏è N√ÉO usamos mais @@unique para email/document aqui por causa do soft delete.
  // Unicidade √© garantida por √≠ndices parciais criados via SQL (ver migra√ß√£o).
  @@index([corretorId, email])
  @@index([corretorId, name])
  @@index([corretorId, status])
  @@index([corretorId, createdAt])
  @@index([corretorId, document])
  @@index([corretorId, deletedAt]) // <‚Äî para filtrar ativos
  @@map("clients")
}

model Policy {
  id         String @id @default(cuid())
  corretorId String
  clientId   String

  corretor Corretor @relation("PolicyCorretor", fields: [corretorId], references: [id], onDelete: Cascade)
  client   Client   @relation("PolicyClient", fields: [corretorId, clientId], references: [corretorId, id], onDelete: Cascade)

  policyNumber String
  insurer      String
  product      String?
  startDate    DateTime
  endDate      DateTime?
  premium      Decimal      @db.Decimal(12, 2)
  status       PolicyStatus @default(DRAFT)
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([corretorId, policyNumber])
  @@index([corretorId, clientId])
  @@index([corretorId, status])
  @@index([corretorId, startDate])
  @@map("policies")
}

// ---------- HEALTH ----------
model RegraCobranca {
  id                String   @id @default(cuid())
  clientId          String
  cliente           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  descricao         String
  dataCorteCobranca Int
  // üëá pol√≠tica avan√ßada (pr√≥-rata, corte, toler√¢ncia, etc.)
  policy            Json?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  beneficiarios Beneficiario[]

  @@index([clientId])
  @@map("health_billing_rules")
}

model Beneficiario {
  id        String   @id @default(cuid())
  clientId  String
  cliente   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  titularId String?
  titular     Beneficiario?  @relation("TitularDependentes", fields: [titularId], references: [id], onDelete: SetNull)
  dependentes Beneficiario[] @relation("TitularDependentes")

  // --- Campos do Arquivo / Layout completo ---
  nomeCompleto     String
  cpf              String?            @db.VarChar(14)
  tipo             BeneficiarioTipo
  dataEntrada      DateTime           // VIGENCIA
  dataSaida        DateTime?
  valorMensalidade Decimal?           @db.Decimal(12, 2) // ‚Üë precis√£o p/ contratos maiores
  status           BeneficiarioStatus @default(ATIVO)
  matricula        String?
  carteirinha      String?
  sexo             String?            @db.VarChar(1)
  dataNascimento   DateTime?
  plano            String?
  centroCusto      String?
  faixaEtaria      String?
  estado           String?
  contrato         String?
  comentario       String?            // A√á√ÉO virou coment√°rio

  // üëá Novos opcionais (regras / auditoria de movimentos)
  regimeCobranca   RegimeCobranca?
  motivoMovimento  MotivoMovimento?
  observacoes      String?

  regraCobrancaId String?
  regraCobranca   RegraCobranca? @relation(fields: [regraCobrancaId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, cpf])
  @@index([clientId, matricula])
  @@index([clientId, carteirinha])
  @@index([clientId, contrato])
  @@index([clientId, plano])
  @@index([clientId, centroCusto])
  @@index([clientId, dataEntrada])
  @@map("health_beneficiaries")
}

model BeneficiarioImportError {
  id         String   @id @default(cuid())
  clientId   String
  cliente    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  uploadedBy String?   // opcional: ID do usu√°rio que importou
  linha      Int       // linha da planilha com erro
  motivo     String    // descri√ß√£o do problema encontrado
  dados      Json      // linha original da planilha

  createdAt  DateTime  @default(now())

  @@index([clientId, createdAt])
  @@map("health_beneficiary_import_errors")
}

model FaturaImportada {
  id       String @id @default(cuid())
  clientId String
  cliente  Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  mesReferencia             DateTime
  nomeBeneficiarioOperadora String?
  cpfBeneficiarioOperadora  String?  @db.VarChar(14)
  valorCobradoOperadora     Decimal? @db.Decimal(12, 2) // ‚Üë precis√£o
  statusConciliacao         String?

  raw       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üëá Itens detalhados da fatura (espelho do layout)
  itens FaturaItem[]

  @@index([clientId, mesReferencia])
  @@map("health_imported_invoices")
}

model FaturaItem {
  id       String @id @default(cuid())
  faturaId String
  fatura   FaturaImportada @relation(fields: [faturaId], references: [id], onDelete: Cascade)

  contrato         String?
  carteirinha      String?
  nomeCompleto     String?
  centroCusto      String?
  sexo             String?
  tipo             String?
  estado           String?
  cpf              String?     @db.VarChar(14)
  dataNascimento   DateTime?
  faixaEtaria      String?
  dataEntrada      DateTime?
  dataSaida        DateTime?
  plano            String?
  valorPlano       Decimal?    @db.Decimal(12, 2)
  statusLinha      String?
  credencial       String?     @db.VarChar(32)
  regimeCobranca   RegimeCobranca?
  motivoMovimento  MotivoMovimento?
  observacoes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([faturaId])
  @@index([cpf])
  @@index([carteirinha])
  @@index([contrato])
  @@index([plano])
  @@index([credencial])
  @@map("health_imported_invoice_items")
}

// ---------- HEALTH PLANOS / PRE√áOS (NOVO) ----------
model HealthPlan {
  id       String  @id @default(cuid())
  slug     String  @unique
  name     String
  isActive Boolean @default(true)

  aliases PlanAlias[]
  prices  HealthPlanPrice[]
  clients ClientHealthPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("health_plans")
}

model PlanAlias {
  id     String     @id @default(cuid())
  planId String
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  alias  String

  @@unique([planId, alias])
  @@index([alias])
  @@map("health_plan_aliases")
}

model HealthPlanPrice {
  id             String         @id @default(cuid())
  planId         String
  plan           HealthPlan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal        @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([planId, vigenciaInicio, vigenciaFim])
  @@index([planId, faixaEtaria])
  @@map("health_plan_prices")
}

model ClientHealthPlan {
  clientId String
  planId   String
  isActive Boolean @default(true)

  client Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  prices ClientHealthPlanPrice[]

  @@id([clientId, planId])
  @@index([planId])
  @@map("client_health_plans")
}

model ClientHealthPlanPrice {
  id       String @id @default(cuid())
  clientId String
  planId   String

  clientPlan ClientHealthPlan @relation(fields: [clientId, planId], references: [clientId, planId], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, planId, vigenciaInicio, vigenciaFim])
  @@index([clientId, planId, faixaEtaria])
  @@map("client_health_plan_prices")
}

// ---------- NORMALIZA√á√ÉO ----------
model Address {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  type       String  @default("COBRANCA")
  zip        String?
  street     String?
  number     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String  @default("BR")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("enderecos")
}

model Contact {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  name      String?
  role      String?
  email     String? @db.Citext
  phone     String?
  notes     String?
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("contatos")
}

// ---------- SERVICES / TAGS (NOVO) ----------
model Service {
  id       String         @id @default(cuid())
  slug     String         @unique
  name     String
  isActive Boolean        @default(true)

  clients  ClientService[]

  @@index([slug], map: "idx_service_slug")
  @@index([name])
  @@map("services")
}

model ClientService {
  clientId  String
  serviceId String

  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([clientId, serviceId])
  @@index([serviceId])
  @@index([clientId])
  @@map("client_services")
}

model Tag {
  id       String     @id @default(cuid())
  slug     String     @unique
  name     String
  isActive Boolean    @default(true)

  clients  ClientTag[]

  @@index([name])
  @@map("tags")
}

model ClientTag {
  clientId String
  tagId    String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([clientId, tagId])
  @@index([tagId])
  @@index([clientId])
  @@map("client_tags")
}

// ---------- AUDIT ----------
model AuditLog {
  id         String   @id @default(cuid())
  corretorId String
  entity     String
  entityId   String
  action     String
  before     Json?
  after      Json?
  actorId    String?
  ip         String?
  userAgent  String?
  at         DateTime @default(now())

  @@index([corretorId, entity, entityId, at])
  @@map("audit_log")
}
