// ---------- GENERATOR / DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum Role {
  ADMIN
  USER
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  LAPSED
  CANCELLED
  EXPIRED
}

enum PersonType {
  PF
  PJ
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
}

// Health
enum BeneficiarioTipo {
  TITULAR
  FILHO
  CONJUGE
}

enum BeneficiarioStatus {
  ATIVO
  INATIVO
}

// Regras / movimentos
enum RegimeCobranca {
  MENSAL
  DIARIO
}

enum MotivoMovimento {
  INCLUSAO
  EXCLUSAO
  ALTERACAO
  NENHUM
}

// Conciliação e comissões
enum ConciliacaoStatus {
  ABERTA
  FECHADA
  ESTORNADA
}

enum ComissaoStatus {
  A_RECEBER
  RECEBIDA
  ESTORNADA
}

// ---- NOVO: categorias de documentos ----
enum DocumentCategory {
  APOLICE
  PROPOSTA
  CONTRATO
  FATURA
  ANEXO
  ADITIVO
  BOLETIMDEOCORRENCIA
  AVISODESINISTRO
  LAUDODEPERICIA
  COMUNICADODEACIDENTE
  COMPROVANTEDERESIDENCIA
  RELATORIODEREGULACAO
  DOCUMENTO
  OUTRO
}

// ---------- CORE ----------
model Corretor {
  id         String   @id @default(cuid())
  name       String
  cpfCnpj    String   @unique
  email      String   @unique @db.Citext
  phone      String?
  subdomain  String   @unique
  slug       String   @unique
  tenantCode String?  @unique @db.VarChar(16)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users           User[]
  clients         Client[]
  policies        Policy[] @relation("PolicyCorretor")
  commissionRules CommissionRule[] @relation("Corretor_CommissionRules")

  // ---- NOVO: back-relation de documentos do corretor
  documents       Document[]
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @db.Citext
  passwordHash String
  role         Role   @default(USER)

  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  refreshTokenHash String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([corretorId, email])
  @@index([corretorId])
  @@index([refreshTokenHash])
  @@index([email])
}

model Client {
  id         String   @id @default(cuid())
  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  name      String
  email     String?   @db.Citext
  document  String?   @db.VarChar(32)
  phone     String?   @db.VarChar(32)
  birthDate DateTime?
  notes     String?

  personType PersonType   @default(PF)
  status     ClientStatus @default(ACTIVE)

  // LEGADO
  tags       String[]     @default([])

  // endereço (legado)
  addressZip        String?
  addressStreet     String?
  addressNumber     String?
  addressComplement String?
  addressDistrict   String?
  addressCity       String?
  addressState      String?
  addressCountry    String? @default("BR")

  // contato principal (legado)
  primaryContactName  String?
  primaryContactRole  String?
  primaryContactEmail String?
  primaryContactPhone String?
  primaryContactNotes String?

  // PF extras
  pfRg            String?
  pfMaritalStatus String?
  pfProfession    String?
  pfIsPEP         Boolean?

  // PJ extras
  pjCorporateName         String?
  pjTradeName             String?
  pjCnpj                  String?
  pjStateRegistration     String?
  pjMunicipalRegistration String?
  pjCNAE                  String?
  pjFoundationDate        DateTime?
  pjRepName               String?
  pjRepCpf                String?
  pjRepEmail              String?
  pjRepPhone              String?

  preferences    Json?
  marketingOptIn Boolean @default(false)
  privacyConsent Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  policies       Policy[]          @relation("PolicyClient")
  beneficiarios  Beneficiario[]
  regrasCobranca RegraCobranca[]
  faturas        FaturaImportada[]

  // NORMALIZAÇÃO
  addresses Address[]
  contacts  Contact[]

  // Serviços / Tags
  services ClientService[]
  tagLinks ClientTag[]

  // Planos
  healthPlans ClientHealthPlan[]

  // Import
  importErrors BeneficiarioImportError[]

  // Conciliação / Comissões
  conciliacoes     Conciliacao[]
  comissoes        ComissaoLancamento[]
  commissionRules  CommissionRule[] @relation("Client_CommissionRules")

  // ---- NOVO: back-relation de documentos do cliente
  documents Document[]

  @@unique([corretorId, id])
  @@index([corretorId, email])
  @@index([corretorId, name])
  @@index([corretorId, status])
  @@index([corretorId, createdAt])
  @@index([corretorId, document])
  @@index([corretorId, deletedAt])
  @@map("clients")
}

model Policy {
  id         String @id @default(cuid())
  corretorId String
  clientId   String

  corretor Corretor @relation("PolicyCorretor", fields: [corretorId], references: [id], onDelete: Cascade)
  client   Client   @relation("PolicyClient",   fields: [corretorId, clientId], references: [corretorId, id], onDelete: Cascade)

  policyNumber String
  insurer      String
  product      String?
  startDate    DateTime
  endDate      DateTime?
  premium      Decimal      @db.Decimal(12, 2)
  status       PolicyStatus @default(DRAFT)
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([corretorId, policyNumber])
  @@index([corretorId, clientId])
  @@index([corretorId, status])
  @@index([corretorId, startDate])
  @@map("policies")
}

// ---------- HEALTH ----------
model RegraCobranca {
  id                String   @id @default(cuid())
  clientId          String
  cliente           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  descricao         String
  dataCorteCobranca Int
  policy            Json?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  beneficiarios Beneficiario[]

  @@index([clientId])
  @@map("health_billing_rules")
}

model Beneficiario {
  id         String   @id @default(cuid())
  clientId   String
  cliente    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  titularId  String?
  titular      Beneficiario?  @relation("TitularDependentes", fields: [titularId], references: [id], onDelete: SetNull)
  dependentes  Beneficiario[] @relation("TitularDependentes")

  nomeCompleto     String
  cpf              String?            @db.VarChar(14)
  tipo             BeneficiarioTipo
  dataEntrada      DateTime
  dataSaida        DateTime?
  valorMensalidade Decimal?           @db.Decimal(12, 2)
  status           BeneficiarioStatus @default(ATIVO)
  matricula        String?
  carteirinha      String?
  sexo             String?            @db.VarChar(1)
  dataNascimento   DateTime?
  plano            String?
  centroCusto      String?
  faixaEtaria      String?
  estado           String?
  contrato         String?
  comentario       String?

  regimeCobranca   RegimeCobranca?
  motivoMovimento  MotivoMovimento?
  observacoes      String?

  regraCobrancaId String?
  regraCobranca   RegraCobranca? @relation(fields: [regraCobrancaId], references: [id], onDelete: SetNull)

  // back-relations
  concItems ConciliacaoItem[]   @relation("Beneficiario_ConciliacaoItems")
  comissoes ComissaoLancamento[] @relation("Beneficiario_ComissaoLancamentos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, cpf])
  @@index([clientId, matricula])
  @@index([clientId, carteirinha])
  @@index([clientId, contrato])
  @@index([clientId, plano])
  @@index([clientId, centroCusto])
  @@index([clientId, dataEntrada])
  @@map("health_beneficiaries")
}

model BeneficiarioImportError {
  id         String   @id @default(cuid())
  clientId   String
  cliente    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  uploadedBy String?
  linha      Int
  motivo     String
  dados      Json

  createdAt  DateTime  @default(now())

  @@index([clientId, createdAt])
  @@map("health_beneficiary_import_errors")
}

model FaturaImportada {
  id       String @id @default(cuid())
  clientId String
  cliente  Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  mesReferencia             DateTime
  nomeBeneficiarioOperadora String?
  cpfBeneficiarioOperadora  String?  @db.VarChar(14)
  valorCobradoOperadora     Decimal? @db.Decimal(12, 2)
  statusConciliacao         String?

  raw       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Detalhes / relações
  itens      FaturaItem[]
  concItems  ConciliacaoItem[] @relation("FaturaImportada_ConciliacaoItems")

  @@index([clientId, mesReferencia])
  @@map("health_imported_invoices")
}

model FaturaItem {
  id       String @id @default(cuid())
  faturaId String
  fatura   FaturaImportada @relation(fields: [faturaId], references: [id], onDelete: Cascade)

  contrato         String?
  carteirinha      String?
  nomeCompleto     String?
  centroCusto      String?
  sexo             String?
  tipo             String?
  estado           String?
  cpf              String?     @db.VarChar(14)
  dataNascimento   DateTime?
  faixaEtaria      String?
  dataEntrada      DateTime?
  dataSaida        DateTime?
  plano            String?
  valorPlano       Decimal?    @db.Decimal(12, 2)
  statusLinha      String?
  credencial       String?     @db.VarChar(32)
  regimeCobranca   RegimeCobranca?
  motivoMovimento  MotivoMovimento?
  observacoes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([faturaId])
  @@index([cpf])
  @@index([carteirinha])
  @@index([contrato])
  @@index([plano])
  @@index([credencial])
  @@map("health_imported_invoice_items")
}

// ---------- HEALTH PLANOS / PREÇOS ----------
model HealthPlan {
  id       String  @id @default(cuid())
  slug     String  @unique
  name     String
  isActive Boolean @default(true)

  aliases          PlanAlias[]
  prices           HealthPlanPrice[]
  clients          ClientHealthPlan[]

  // back-relations para regras e comissões
  commissionRules  CommissionRule[]      @relation("HealthPlan_CommissionRules")
  comissoes        ComissaoLancamento[]  @relation("HealthPlan_ComissaoLancamentos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("health_plans")
}

model PlanAlias {
  id     String     @id @default(cuid())
  planId String
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  alias  String

  @@unique([planId, alias])
  @@index([alias])
  @@map("health_plan_aliases")
}

model HealthPlanPrice {
  id             String         @id @default(cuid())
  planId         String
  plan           HealthPlan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal        @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([planId, vigenciaInicio, vigenciaFim])
  @@index([planId, faixaEtaria])
  @@map("health_plan_prices")
}

model ClientHealthPlan {
  clientId String
  planId   String
  isActive Boolean @default(true)

  client Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  prices ClientHealthPlanPrice[]

  @@id([clientId, planId])
  @@index([planId])
  @@map("client_health_plans")
}

model ClientHealthPlanPrice {
  id       String @id @default(cuid())
  clientId String
  planId   String

  clientPlan ClientHealthPlan @relation(fields: [clientId, planId], references: [clientId, planId], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, planId, vigenciaInicio, vigenciaFim])
  @@index([clientId, planId, faixaEtaria])
  @@map("client_health_plan_prices")
}

// ---------- CONCILIAÇÃO ----------
model Conciliacao {
  id            String            @id @default(cuid())
  clientId      String
  client        Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  mesReferencia DateTime
  status        ConciliacaoStatus @default(ABERTA)

  // snapshots e filtros do fechamento
  totals  Json?
  filtros Json?
  counts  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  closedBy  String?
  closedAt  DateTime?

  items     ConciliacaoItem[]
  comissoes ComissaoLancamento[]

  @@unique([clientId, mesReferencia], name: "clientId_mesReferencia")
  @@index([clientId, status, mesReferencia])
  @@map("reconciliation_runs")
}

model ConciliacaoItem {
  id             String        @id @default(cuid())
  conciliacaoId  String
  conciliacao    Conciliacao   @relation(fields: [conciliacaoId], references: [id], onDelete: Cascade)

  faturaId       String?
  fatura         FaturaImportada? @relation("FaturaImportada_ConciliacaoItems", fields: [faturaId], references: [id], onDelete: SetNull)

  beneficiarioId String?
  beneficiario   Beneficiario?    @relation("Beneficiario_ConciliacaoItems", fields: [beneficiarioId], references: [id], onDelete: SetNull)

  cpf            String? @db.VarChar(14)
  nome           String?

  valorCobrado   Decimal?      @db.Decimal(12, 2)
  valorCadastro  Decimal?      @db.Decimal(12, 2)
  diferenca      Decimal?      @db.Decimal(12, 2)

  // 'OK' | 'DIVERGENTE' | 'DUPLICADO' | 'SOFATURA' | 'SOCADASTRO'
  statusLinha    String

  plano          String?
  centroCusto    String?
  faixaEtaria    String?
  regimeCobranca RegimeCobranca?
  motivoMovimento MotivoMovimento?

  raw Json?
  createdAt DateTime @default(now())

  @@index([conciliacaoId, statusLinha])
  @@map("reconciliation_items")
}

// ---------- REGRAS DE COMISSÃO ----------
model CommissionRule {
  id             String          @id @default(cuid())

  corretorId     String
  corretor       Corretor        @relation("Corretor_CommissionRules", fields: [corretorId], references: [id], onDelete: Cascade)

  clientId       String?
  client         Client?         @relation("Client_CommissionRules", fields: [clientId], references: [id], onDelete: SetNull)

  planId         String?
  plan           HealthPlan?     @relation("HealthPlan_CommissionRules", fields: [planId], references: [id], onDelete: SetNull)

  faixaEtaria    String?
  regimeCobranca RegimeCobranca?

  vigenciaInicio DateTime
  vigenciaFim    DateTime?

  percent        Decimal?        @db.Decimal(7, 6)
  valorFixo      Decimal?        @db.Decimal(12, 2)
  baseSource     String?         // 'INVOICE' | 'CADASTRO' | 'MIN' | 'MAX' | 'ZERO_IF_MISMATCH'

  isActive       Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([corretorId, clientId, planId, faixaEtaria, vigenciaInicio, vigenciaFim])
  @@map("commission_rules")
}

// ---------- LANÇAMENTOS DE COMISSÃO ----------
model ComissaoLancamento {
  id             String          @id @default(cuid())

  clientId       String
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)

  conciliacaoId  String
  conciliacao    Conciliacao     @relation(fields: [conciliacaoId], references: [id], onDelete: Cascade)

  beneficiarioId String?
  beneficiario   Beneficiario?   @relation("Beneficiario_ComissaoLancamentos", fields: [beneficiarioId], references: [id], onDelete: SetNull)

  planId         String?
  plan           HealthPlan?     @relation("HealthPlan_ComissaoLancamentos", fields: [planId], references: [id], onDelete: SetNull)

  competencia    DateTime
  base           Decimal         @db.Decimal(12, 2)
  aliquota       Decimal?        @db.Decimal(7, 6)
  valor          Decimal         @db.Decimal(12, 2)

  status         ComissaoStatus  @default(A_RECEBER)
  dueDate        DateTime?
  receivedAt     DateTime?
  reference      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, competencia, status])
  @@index([conciliacaoId])
  @@map("commission_accruals")
}

// ---------- NORMALIZAÇÃO ----------
model Address {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  type       String  @default("COBRANCA")
  zip        String?
  street     String?
  number     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String  @default("BR")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("enderecos")
}

model Contact {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  name      String?
  role      String?
  email     String? @db.Citext
  phone     String?
  notes     String?
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("contatos")
}

// ---------- SERVICES / TAGS ----------
model Service {
  id       String         @id @default(cuid())
  slug     String         @unique
  name     String
  isActive Boolean        @default(true)

  clients  ClientService[]

  @@index([slug], map: "idx_service_slug")
  @@index([name])
  @@map("services")
}

model ClientService {
  clientId  String
  serviceId String

  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([clientId, serviceId])
  @@index([serviceId])
  @@index([clientId])
  @@map("client_services")
}

model Tag {
  id       String     @id @default(cuid())
  slug     String     @unique
  name     String
  isActive Boolean    @default(true)

  clients  ClientTag[]

  @@index([name])
  @@map("tags")
}

model ClientTag {
  clientId String
  tagId    String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([clientId, tagId])
  @@index([tagId])
  @@index([clientId])
  @@map("client_tags")
}

// ---------- AUDIT ----------
model AuditLog {
  id         String   @id @default(cuid())
  corretorId String
  entity     String
  entityId   String
  action     String
  before     Json?
  after      Json?
  actorId    String?
  ip         String?
  userAgent  String?
  at         DateTime @default(now())

  @@index([corretorId, entity, entityId, at])
  @@map("audit_log")
}

// ---------- NOVO: DOCUMENTOS ----------
model Document {
  id          String   @id @default(cuid())

  corretorId  String
  clientId    String
  policyId    String? // opcional: referência direta a Policy.id (quando fizer sentido)

  filename    String
  mimeType    String
  size        Int
  category    DocumentCategory @default(ANEXO)
  tags        String[]         @default([])
  notes       String?

  storageKey  String   @unique // ex: s3://bucket/tenants/{corretorId}/clients/{clientId}/{uuid}
  checksum    String?          // sha256 (opcional)

  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // relações
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  corretor Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  // NOTE: se quiser atrelar ao seguro, você pode futuramente criar:
  // policy  Policy?  @relation(fields: [policyId], references: [id], onDelete: SetNull)
  // e um @@index(policyId)

  @@index([corretorId, clientId, category, createdAt])
  @@map("documents")
}
