// ---------- GENERATOR / DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum Role {
  ADMIN
  USER
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  LAPSED
  CANCELLED
  EXPIRED
}

enum PersonType {
  PF
  PJ
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
}

// Health
enum BeneficiarioTipo {
  TITULAR
  FILHO
  CONJUGE
}

enum BeneficiarioStatus {
  ATIVO
  INATIVO
}

// Regras / movimentos
enum RegimeCobranca {
  MENSAL
  DIARIO
}

enum MotivoMovimento {
  INCLUSAO
  EXCLUSAO
  ALTERACAO
  NENHUM
}

// Conciliação e comissões
enum ConciliacaoStatus {
  ABERTA
  FECHADA
  ESTORNADA
}

enum ComissaoStatus {
  A_RECEBER
  RECEBIDA
  ESTORNADA
}

// ---- NOVO: categorias de documentos ----
enum DocumentCategory {
  APOLICE
  PROPOSTA
  CONTRATO
  FATURA
  ANEXO
  ADITIVO
  BOLETIMDEOCORRENCIA
  AVISODESINISTRO
  LAUDODEPERICIA
  COMUNICADODEACIDENTE
  COMPROVANTEDERESIDENCIA
  RELATORIODEREGULACAO
  DOCUMENTO
  OUTRO
}

// ---------- RISCOS EMPRESARIAIS (NOVO) ----------
enum RiskProjectStatus {
  DRAFT
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum RiskProjectCategory {
  RC_GERAL
  RC_PROFISSIONAL
  RISCOS_ENGENHARIA
  EQUIPAMENTOS
  OBRA
}

enum RiskEquipmentStatus {
  ACTIVE
  UNDER_MAINTENANCE
  INACTIVE
  RETIRED
  LOST
}

enum RiskEquipmentType {
  MOBILE
  FIXED
}

enum RiskCertificateStatus {
  PENDING
  VALID
  EXPIRED
  REJECTED
}

// ---------- FINANCEIRO RISCOS / APÓLICE (NOVO) ----------
enum InstallmentStatus {
  OPEN
  PAID
  OVERDUE
  CANCELED
}

enum EndorsementType {
  INCREASE
  DECREASE
  CANCELLATION
  OTHER
}

enum CommissionOrigin {
  HEALTH_RECONCILIATION
  RISK_POLICY_INSTALLMENT
  RISK_ENDORSEMENT_ADJUST
}

// ---------- NOVO: linhas de negócio da seguradora ----------
enum InsuranceLine {
  HEALTH
  DENTAL
  LIFE
  P_AND_C // Property & Casualty (patrimoniais, RC, engenharia etc.)
  OTHER
}

// ---------- NOVO: SEGURADORA / OPERADORA ----------
model Insurer {
  id        String          @id @default(cuid())
  slug      String          @unique // ex.: "amil", "bradesco-saude"
  legalName String          // razão social
  tradeName String          // nome fantasia / brand
  taxId     String?         @db.VarChar(32) // CNPJ
  ansCode   String?         @db.VarChar(16) // registro ANS (saúde) quando aplicável
  lines     InsuranceLine[] // ex.: [HEALTH, DENTAL]

  isActive Boolean @default(true)
  website  String?
  meta     Json?

  // back-relations nomeadas
  healthPlans  HealthPlan[]         @relation("Insurer_HealthPlans")
  policies     Policy[]             @relation("Insurer_Policies")
  billingRules InsurerBillingRule[] @relation("Insurer_BillingRules")

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FaturaImportada FaturaImportada[]
  Conciliacao     Conciliacao[]

  @@index([tradeName])
  @@index([legalName])
  @@index([taxId])
  @@index([ansCode])
  @@map("insurers")
}

// ---------- CORE ----------
model Corretor {
  id         String   @id @default(cuid())
  name       String
  cpfCnpj    String   @unique
  email      String   @unique @db.Citext
  phone      String?
  subdomain  String   @unique
  slug       String   @unique
  tenantCode String?  @unique @db.VarChar(16)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users           User[]
  clients         Client[]
  policies        Policy[]         @relation("PolicyCorretor")
  commissionRules CommissionRule[] @relation("Corretor_CommissionRules")

  // back-relation de documentos do corretor
  documents Document[]

  // back-relations de riscos
  riskProjects       RiskProject[]
  riskEquipments     RiskEquipment[]
  riskCertificates   RiskCertificate[]
  commissionReceipts CommissionReceipt[]
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @db.Citext
  passwordHash String
  role         Role   @default(USER)

  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  refreshTokenHash String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([corretorId, email])
  @@index([corretorId])
  @@index([refreshTokenHash])
  @@index([email])
}

model Client {
  id         String   @id @default(cuid())
  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  name      String
  email     String?   @db.Citext
  document  String?   @db.VarChar(32)
  phone     String?   @db.VarChar(32)
  birthDate DateTime?
  notes     String?

  personType PersonType   @default(PF)
  status     ClientStatus @default(ACTIVE)

  // LEGADO
  tags String[] @default([])

  // endereço (legado)
  addressZip        String?
  addressStreet     String?
  addressNumber     String?
  addressComplement String?
  addressDistrict   String?
  addressCity       String?
  addressState      String?
  addressCountry    String? @default("BR")

  // contato principal (legado)
  primaryContactName  String?
  primaryContactRole  String?
  primaryContactEmail String?
  primaryContactPhone String?
  primaryContactNotes String?

  // PF extras
  pfRg            String?
  pfMaritalStatus String?
  pfProfession    String?
  pfIsPEP         Boolean?

  // PJ extras
  pjCorporateName         String?
  pjTradeName             String?
  pjCnpj                  String?
  pjStateRegistration     String?
  pjMunicipalRegistration String?
  pjCNAE                  String?
  pjFoundationDate        DateTime?
  pjRepName               String?
  pjRepCpf                String?
  pjRepEmail              String?
  pjRepPhone              String?

  preferences    Json?
  marketingOptIn Boolean @default(false)
  privacyConsent Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  policies       Policy[]          @relation("PolicyClient")
  beneficiarios  Beneficiario[]
  regrasCobranca RegraCobranca[]
  faturas        FaturaImportada[]

  // NORMALIZAÇÃO
  addresses Address[]
  contacts  Contact[]

  // Serviços / Tags
  services ClientService[]
  tagLinks ClientTag[]

  // Planos
  healthPlans ClientHealthPlan[]

  // Import
  importErrors BeneficiarioImportError[]

  // Conciliação / Comissões
  conciliacoes    Conciliacao[]
  comissoes       ComissaoLancamento[]
  commissionRules CommissionRule[]     @relation("Client_CommissionRules")

  // Regras por seguradora
  billingRules InsurerBillingRule[] @relation("Client_BillingRules")

  // back-relations de riscos
  riskProjects     RiskProject[]
  riskEquipments   RiskEquipment[]
  riskCertificates RiskCertificate[]

  // back-relation de documentos do cliente
  documents Document[]

  @@unique([corretorId, id])
  @@index([corretorId, email])
  @@index([corretorId, name])
  @@index([corretorId, status])
  @@index([corretorId, createdAt])
  @@index([corretorId, document])
  @@index([corretorId, deletedAt])
  @@map("clients")
}

model Policy {
  id         String @id @default(cuid())
  corretorId String
  clientId   String

  corretor Corretor @relation("PolicyCorretor", fields: [corretorId], references: [id], onDelete: Cascade)
  client   Client   @relation("PolicyClient", fields: [corretorId, clientId], references: [corretorId, id], onDelete: Cascade)

  policyNumber String

  // LEGACY (Fase A – compatibilidade)
  insurer String

  // NEW (Fase A – backfill; depois substitui o string)
  insurerId  String?
  insurerRel Insurer? @relation("Insurer_Policies", fields: [insurerId], references: [id], onDelete: SetNull)

  product   String?
  startDate DateTime
  endDate   DateTime?
  premium   Decimal      @db.Decimal(12, 2)
  status    PolicyStatus @default(DRAFT)
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // back-relations (opcionais; podem existir em RiskProjectPolicy)
  projectLinks       RiskProjectPolicy[]
  ComissaoLancamento ComissaoLancamento[]
  PolicyInstallment  PolicyInstallment[]
  PolicyEndorsement  PolicyEndorsement[]

  @@unique([corretorId, policyNumber])
  @@index([corretorId, clientId])
  @@index([corretorId, status])
  @@index([corretorId, startDate])
  @@index([insurerId])
  @@map("policies")
}

// ---------- HEALTH ----------
model RegraCobranca {
  id                String @id @default(cuid())
  clientId          String
  cliente           Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  descricao         String
  dataCorteCobranca Int
  policy            Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  beneficiarios Beneficiario[]

  @@index([clientId])
  @@map("health_billing_rules")
}

model Beneficiario {
  id          String         @id @default(cuid())
  clientId    String
  cliente     Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  titularId   String?
  titular     Beneficiario?  @relation("TitularDependentes", fields: [titularId], references: [id], onDelete: SetNull)
  dependentes Beneficiario[] @relation("TitularDependentes")

  nomeCompleto     String
  cpf              String?            @db.VarChar(14)
  tipo             BeneficiarioTipo
  dataEntrada      DateTime
  dataSaida        DateTime?
  valorMensalidade Decimal?           @db.Decimal(12, 2)
  status           BeneficiarioStatus @default(ATIVO)
  matricula        String?
  carteirinha      String?
  sexo             String?            @db.VarChar(1)
  dataNascimento   DateTime?
  plano            String?
  centroCusto      String?
  faixaEtaria      String?
  estado           String?
  contrato         String?
  comentario       String?

  regimeCobranca  RegimeCobranca?
  motivoMovimento MotivoMovimento?
  observacoes     String?

  regraCobrancaId String?
  regraCobranca   RegraCobranca? @relation(fields: [regraCobrancaId], references: [id], onDelete: SetNull)

  // ===== Operadora/CSV (1:1 opcional) =====
  operadora BeneficiarioOperadora?

  // back-relations
  concItems ConciliacaoItem[]    @relation("Beneficiario_ConciliacaoItems")
  comissoes ComissaoLancamento[] @relation("Beneficiario_ComissaoLancamentos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, cpf])
  @@index([clientId, matricula])
  @@index([clientId, carteirinha])
  @@index([clientId, contrato])
  @@index([clientId, plano])
  @@index([clientId, centroCusto])
  @@index([clientId, dataEntrada])
  @@map("health_beneficiaries")
}

// ===== Operadora/CSV: manter datas como STRING para aceitar "dd/mm/yyyy" sem parse ISO =====
model BeneficiarioOperadora {
  id             String       @id @default(cuid())
  beneficiarioId String       @unique
  beneficiario   Beneficiario @relation(fields: [beneficiarioId], references: [id], onDelete: Cascade)

  empresa                 String?   @map("Empresa")
  cpfOperadora            String?   @map("Cpf")
  usuario                 String?   @map("Usuario")
  nomeSocial              String?   @map("Nm_Social")
  estadoCivil             String?   @map("Estado_Civil")
  dataNascimentoOperadora String?   @map("Data_Nascimento") // << String (não DateTime)
  sexoOperadora           String?   @map("Sexo") @db.VarChar(1)
  identidade              String?   @map("Identidade")
  orgaoExpedidor          String?   @map("Orgao_Exp")
  ufOrgao                 String?   @map("Uf_Orgao")
  ufEndereco              String?   @map("Uf_Endereco")
  cidade                  String?   @map("Cidade")
  tipoLogradouro          String?   @map("Tipo_Logradouro")
  logradouro              String?   @map("Logradouro")
  numero                  String?   @map("Numero")
  complemento             String?   @map("Complemento")
  bairro                  String?   @map("Bairro")
  cep                     String?   @map("Cep")
  fone                    String?   @map("Fone")
  celular                 String?   @map("Celular")
  planoOperadora          String?   @map("Plano")
  matriculaOperadora      String?   @map("Matricula")
  filial                  String?   @map("Filial")
  codigoUsuario           String?   @map("Codigo_Usuario")
  dataAdmissao            String?   @map("Dt_Admissao")      // << String
  codigoCongenere         String?   @map("Codigo_Congenere")
  nomeCongenere           String?   @map("Nm_Congenere")
  tipoUsuario             String?   @map("Tipo_Usuario")
  nomeMae                 String?   @map("Nome_Mae")
  pis                     String?   @map("Pis")
  cns                     String?   @map("Cns")
  ctps                    String?   @map("Ctps")
  serieCtps               String?   @map("Serie_Ctps")
  dataProcessamento       String?   @map("Data_Processamento") // << String
  dataCadastro            String?   @map("Data_Cadastro")       // << String
  unidade                 String?   @map("Unidade")
  descricaoUnidade        String?   @map("Descricao_Unidade")
  cpfDependente           String?   @map("Cpf_Dependente")
  grauParentesco          String?   @map("Grau_Parentesco")
  dataCasamento           String?   @map("Dt_Casamento")       // << String
  nuRegistroPessoaNatural String?   @map("Nu_Registro_Pessoa_Natural")
  cdTabela                String?   @map("Cd_Tabela")
  empresaUtilizacao       String?   @map("Empresa_Utilizacao")
  dataCancelamento        String?   @map("Dt_Cancelamento")    // << String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([beneficiarioId])
  @@map("health_beneficiary_operator")
}

model BeneficiarioImportError {
  id       String @id @default(cuid())
  clientId String
  cliente  Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  uploadedBy String?
  linha      Int
  motivo     String
  dados      Json

  createdAt DateTime @default(now())

  @@index([clientId, createdAt])
  @@map("health_beneficiary_import_errors")
}

model FaturaImportada {
  id       String @id @default(cuid())
  clientId String
  cliente  Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // NOVO: operadora associada à fatura importada
  insurerId String?
  insurer   Insurer? @relation(fields: [insurerId], references: [id], onDelete: SetNull)

  mesReferencia             DateTime
  nomeBeneficiarioOperadora String?
  cpfBeneficiarioOperadora  String?  @db.VarChar(14)
  valorCobradoOperadora     Decimal? @db.Decimal(12, 2)
  statusConciliacao         String?

  raw       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Detalhes / relações
  itens     FaturaItem[]
  concItems ConciliacaoItem[] @relation("FaturaImportada_ConciliacaoItems")

  @@index([clientId, mesReferencia])
  @@index([insurerId])
  @@index([clientId, mesReferencia, insurerId])
  @@map("health_imported_invoices")
}

model FaturaItem {
  id       String          @id @default(cuid())
  faturaId String
  fatura   FaturaImportada @relation(fields: [faturaId], references: [id], onDelete: Cascade)

  contrato        String?
  carteirinha     String?
  nomeCompleto    String?
  centroCusto     String?
  sexo            String?
  tipo            String?
  estado          String?
  cpf             String?          @db.VarChar(14)
  dataNascimento  DateTime?
  faixaEtaria     String?
  dataEntrada     DateTime?
  dataSaida       DateTime?
  plano           String?
  valorPlano      Decimal?         @db.Decimal(12, 2)
  statusLinha     String?
  credencial      String?          @db.VarChar(32)
  regimeCobranca  RegimeCobranca?
  motivoMovimento MotivoMovimento?
  observacoes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([faturaId])
  @@index([cpf])
  @@index([carteirinha])
  @@index([contrato])
  @@index([plano])
  @@index([credencial])
  @@map("health_imported_invoice_items")
}

// ---------- HEALTH PLANOS / PREÇOS ----------
model HealthPlan {
  id       String  @id @default(cuid())
  slug     String  @unique
  name     String
  isActive Boolean @default(true)

  // NEW (opcional)
  insurerId String?
  insurer   Insurer? @relation("Insurer_HealthPlans", fields: [insurerId], references: [id], onDelete: SetNull)

  aliases PlanAlias[]
  prices  HealthPlanPrice[]
  clients ClientHealthPlan[]

  // Regras por seguradora
  billingRules InsurerBillingRule[] @relation("Plan_BillingRules")

  // Regras de comissão / lançamentos
  commissionRules CommissionRule[]     @relation("HealthPlan_CommissionRules")
  comissoes       ComissaoLancamento[] @relation("HealthPlan_ComissaoLancamentos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([insurerId])
  @@map("health_plans")
}

model PlanAlias {
  id     String     @id @default(cuid())
  planId String
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  alias  String

  @@unique([planId, alias])
  @@index([alias])
  @@map("health_plan_aliases")
}

model HealthPlanPrice {
  id     String     @id @default(cuid())
  planId String
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal         @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([planId, vigenciaInicio, vigenciaFim])
  @@index([planId, faixaEtaria])
  @@map("health_plan_prices")
}

model ClientHealthPlan {
  clientId String
  planId   String
  isActive Boolean @default(true)

  client Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  plan   HealthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  prices ClientHealthPlanPrice[]

  @@id([clientId, planId])
  @@index([planId])
  @@map("client_health_plans")
}

model ClientHealthPlanPrice {
  id       String @id @default(cuid())
  clientId String
  planId   String

  clientPlan ClientHealthPlan @relation(fields: [clientId, planId], references: [clientId, planId], onDelete: Cascade)

  vigenciaInicio DateTime
  vigenciaFim    DateTime?
  faixaEtaria    String?
  valor          Decimal         @db.Decimal(12, 2)
  regimeCobranca RegimeCobranca?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, planId, vigenciaInicio, vigenciaFim])
  @@index([clientId, planId, faixaEtaria])
  @@map("client_health_plan_prices")
}

// ---------- NOVO: REGRAS DE COBRANÇA POR SEGURADORA ----------
model InsurerBillingRule {
  id String @id @default(cuid())

  insurerId String
  insurer   Insurer @relation("Insurer_BillingRules", fields: [insurerId], references: [id], onDelete: Cascade)

  clientId String?
  client   Client? @relation("Client_BillingRules", fields: [clientId], references: [id], onDelete: Cascade)

  planId String?
  plan   HealthPlan? @relation("Plan_BillingRules", fields: [planId], references: [id], onDelete: SetNull)

  faixaEtaria String?
  regime      RegimeCobranca?

  // JSON com a política/regra da seguradora (ex.: arredondamento, cálculo por faixa, carência, etc.)
  policy Json

  isActive  Boolean   @default(true)
  validFrom DateTime  @default(now())
  validTo   DateTime?
  version   Int       @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([insurerId, clientId, planId, faixaEtaria, regime, isActive, validFrom, validTo])
  @@map("insurer_billing_rules")
}

// ---------- CONCILIAÇÃO ----------
model Conciliacao {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // NOVO: operadora associada ao fechamento
  insurerId String?
  insurer   Insurer? @relation(fields: [insurerId], references: [id], onDelete: SetNull)

  mesReferencia DateTime
  status        ConciliacaoStatus @default(ABERTA)

  // snapshots e filtros do fechamento
  totals  Json?
  filtros Json?
  counts  Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  closedBy  String?
  closedAt  DateTime?

  items     ConciliacaoItem[]
  comissoes ComissaoLancamento[]

  // Único por cliente + mês + seguradora
  @@unique([clientId, mesReferencia, insurerId], name: "clientId_mesReferencia_insurerId")
  @@index([clientId, mesReferencia])
  @@index([clientId, status, mesReferencia])
  @@index([insurerId])
  @@map("reconciliation_runs")
}

model ConciliacaoItem {
  id            String      @id @default(cuid())
  conciliacaoId String
  conciliacao   Conciliacao @relation(fields: [conciliacaoId], references: [id], onDelete: Cascade)

  faturaId String?
  fatura   FaturaImportada? @relation("FaturaImportada_ConciliacaoItems", fields: [faturaId], references: [id], onDelete: SetNull)

  beneficiarioId String?
  beneficiario   Beneficiario? @relation("Beneficiario_ConciliacaoItems", fields: [beneficiarioId], references: [id], onDelete: SetNull)

  cpf  String? @db.VarChar(14)
  nome String?

  valorCobrado  Decimal? @db.Decimal(12, 2)
  valorCadastro Decimal? @db.Decimal(12, 2)
  diferenca     Decimal? @db.Decimal(12, 2)

  // 'OK' | 'DIVERGENTE' | 'DUPLICADO' | 'SOFATURA' | 'SOCADASTRO'
  statusLinha String

  plano           String?
  centroCusto     String?
  faixaEtaria     String?
  regimeCobranca  RegimeCobranca?
  motivoMovimento MotivoMovimento?

  raw       Json?
  createdAt DateTime @default(now())

  @@index([conciliacaoId, statusLinha])
  @@map("reconciliation_items")
}

// ---------- REGRAS DE COMISSÃO ----------
model CommissionRule {
  id String @id @default(cuid())

  corretorId String
  corretor   Corretor @relation("Corretor_CommissionRules", fields: [corretorId], references: [id], onDelete: Cascade)

  clientId String?
  client   Client? @relation("Client_CommissionRules", fields: [clientId], references: [id], onDelete: SetNull)

  planId String?
  plan   HealthPlan? @relation("HealthPlan_CommissionRules", fields: [planId], references: [id], onDelete: SetNull)

  faixaEtaria    String?
  regimeCobranca RegimeCobranca?

  vigenciaInicio DateTime
  vigenciaFim    DateTime?

  percent    Decimal? @db.Decimal(7, 6)
  valorFixo  Decimal? @db.Decimal(12, 2)
  baseSource String? // 'INVOICE' | 'CADASTRO' | 'MIN' | 'MAX' | 'ZERO_IF_MISMATCH'

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([corretorId, clientId, planId, faixaEtaria, vigenciaInicio, vigenciaFim])
  @@map("commission_rules")
}

// ---------- LANÇAMENTOS DE COMISSÃO ----------
model ComissaoLancamento {
  id String @id @default(cuid())

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // agora opcional para suportar Riscos
  conciliacaoId String?
  conciliacao   Conciliacao? @relation(fields: [conciliacaoId], references: [id], onDelete: SetNull)

  beneficiarioId String?
  beneficiario   Beneficiario? @relation("Beneficiario_ComissaoLancamentos", fields: [beneficiarioId], references: [id], onDelete: SetNull)

  planId String?
  plan   HealthPlan? @relation("HealthPlan_ComissaoLancamentos", fields: [planId], references: [id], onDelete: SetNull)

  // vínculos de Riscos
  policyId            String?
  policy              Policy?            @relation(fields: [policyId], references: [id], onDelete: SetNull)
  policyInstallmentId String?
  policyInstallment   PolicyInstallment? @relation(fields: [policyInstallmentId], references: [id], onDelete: SetNull)
  origin              CommissionOrigin?

  competencia DateTime
  base        Decimal  @db.Decimal(12, 2)
  aliquota    Decimal? @db.Decimal(7, 6)
  valor       Decimal  @db.Decimal(12, 2)

  status     ComissaoStatus @default(A_RECEBER)
  dueDate    DateTime?
  receivedAt DateTime?
  reference  Json?

  // back-relation para recibos (itens)
  receiptItems CommissionReceiptItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, competencia, status])
  @@index([conciliacaoId])
  @@index([policyId])
  @@index([policyInstallmentId])
  @@map("commission_accruals")
}

// ---------- NORMALIZAÇÃO ----------
model Address {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  type       String  @default("COBRANCA")
  zip        String?
  street     String?
  number     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String  @default("BR")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("enderecos")
}

model Contact {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  name      String?
  role      String?
  email     String? @db.Citext
  phone     String?
  notes     String?
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@map("contatos")
}

// ---------- SERVICES / TAGS ----------
model Service {
  id       String  @id @default(cuid())
  slug     String  @unique
  name     String
  isActive Boolean @default(true)

  clients ClientService[]

  @@index([slug], map: "idx_service_slug")
  @@index([name])
  @@map("services")
}

model ClientService {
  clientId  String
  serviceId String

  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([clientId, serviceId])
  @@index([serviceId])
  @@index([clientId])
  @@map("client_services")
}

model Tag {
  id       String  @id @default(cuid())
  slug     String  @unique
  name     String
  isActive Boolean @default(true)

  clients ClientTag[]

  @@index([name])
  @@map("tags")
}

model ClientTag {
  clientId String
  tagId    String

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([clientId, tagId])
  @@index([tagId])
  @@index([clientId])
  @@map("client_tags")
}

// ---------- AUDIT ----------
model AuditLog {
  id         String   @id @default(cuid())
  corretorId String
  entity     String
  entityId   String
  action     String
  before     Json?
  after      Json?
  actorId    String?
  ip         String?
  userAgent  String?
  at         DateTime @default(now())

  @@index([corretorId, entity, entityId, at])
  @@map("audit_log")
}

// ---------- NOVO: DOCUMENTOS ----------
model Document {
  id String @id @default(cuid())

  corretorId String
  clientId   String
  policyId   String? // opcional: referência direta a Policy.id (não relacionada)

  filename String
  mimeType String
  size     Int
  category DocumentCategory @default(ANEXO)
  tags     String[]         @default([])
  notes    String?

  storageKey String  @unique // ex: s3://bucket/tenants/{corretorId}/clients/{clientId}/{uuid}
  checksum   String? // sha256 (opcional)

  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relações
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  corretor Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  @@index([corretorId, clientId, category, createdAt])
  @@map("documents")
}

// ---------- NOVO: RISCOS EMPRESARIAIS MODELOS ----------
model RiskProject {
  id String @id @default(cuid())

  corretorId String
  clientId   String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  code        String?             @db.VarChar(32)
  name        String
  category    RiskProjectCategory
  description String?

  startDate DateTime
  endDate   DateTime?
  status    RiskProjectStatus @default(DRAFT)

  totalInsuredValue Decimal? @db.Decimal(14, 2)
  limitOfLiability  Decimal? @db.Decimal(14, 2)
  deductible        Decimal? @db.Decimal(14, 2)
  currency          String?  @default("BRL")
  sublimits         Json?
  notes             String?
  meta              Json?

  locations    RiskLocation[]
  equipments   RiskEquipment[]
  policies     RiskProjectPolicy[]
  stakeholders RiskStakeholder[]
  certificates RiskCertificate[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([corretorId, clientId, code])
  @@index([corretorId, clientId, status])
  @@index([corretorId, clientId, category])
  @@index([corretorId, startDate])
  @@map("risk_projects")
}

model RiskLocation {
  id        String      @id @default(cuid())
  projectId String
  project   RiskProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  zip        String?
  street     String?
  number     String?
  complement String?
  district   String?
  city       String?
  state      String?
  country    String? @default("BR")

  latitude  Decimal? @db.Decimal(9, 6)
  longitude Decimal? @db.Decimal(9, 6)

  startDate DateTime?
  endDate   DateTime?

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relation para RiskEquipment.location
  equipments RiskEquipment[]

  @@index([projectId])
  @@map("risk_project_locations")
}

model RiskEquipment {
  id String @id @default(cuid())

  corretorId String
  clientId   String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  projectId  String?
  project    RiskProject?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  locationId String?
  location   RiskLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  assetTag     String? @db.VarChar(64)
  serial       String? @db.VarChar(64)
  category     String
  manufacturer String?
  model        String?
  year         Int?

  type         RiskEquipmentType   @default(MOBILE)
  status       RiskEquipmentStatus @default(ACTIVE)
  valueInsured Decimal?            @db.Decimal(14, 2)
  currency     String?             @default("BRL")

  acquiredAt       DateTime?
  retiredAt        DateTime?
  lastInspectionAt DateTime?
  nextInspectionAt DateTime?

  notes String?
  meta  Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([corretorId, clientId, assetTag])
  @@index([corretorId, clientId, status])
  @@index([corretorId, clientId, category])
  @@index([projectId])
  @@map("risk_equipments")
}

model RiskProjectPolicy {
  id String @id @default(cuid())

  projectId String
  project   RiskProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  policyId String
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  role  String? // "PRINCIPAL", "ADICIONAL", etc.
  notes String?

  linkedAt   DateTime  @default(now())
  unlinkedAt DateTime?

  @@unique([projectId, policyId])
  @@index([policyId])
  @@map("risk_project_policies")
}

model RiskStakeholder {
  id        String      @id @default(cuid())
  projectId String
  project   RiskProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role     String
  name     String
  document String? @db.VarChar(32)
  email    String? @db.Citext
  phone    String? @db.VarChar(32)
  notes    String?
  meta     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, role])
  @@map("risk_stakeholders")
}

model RiskCertificate {
  id String @id @default(cuid())

  corretorId String
  clientId   String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  projectId String?
  project   RiskProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  status            RiskCertificateStatus @default(PENDING)
  holderName        String
  holderEmail       String?               @db.Citext
  additionalInsured Boolean?
  requirements      Json?

  issuedAt  DateTime?
  validFrom DateTime?
  validTo   DateTime?

  documentId String?
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([corretorId, clientId, status])
  @@index([projectId, status])
  @@map("risk_certificates")
}

// ---------- NOVO: PARCELAS / ENDOSSOS / RECEBIMENTOS ----------
model PolicyInstallment {
  id       String @id @default(cuid())
  policyId String
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  number      Int
  dueDate     DateTime
  amountGross Decimal  @db.Decimal(12, 2)
  amountNet   Decimal? @db.Decimal(12, 2)
  taxes       Decimal? @db.Decimal(12, 2)
  fees        Decimal? @db.Decimal(12, 2)

  status    InstallmentStatus @default(OPEN)
  paidAt    DateTime?
  reference Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accruals ComissaoLancamento[]

  @@index([policyId, number])
  @@index([dueDate, status])
  @@map("policy_installments")
}

model PolicyEndorsement {
  id       String @id @default(cuid())
  policyId String
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  type        EndorsementType
  effectiveAt DateTime
  amountDelta Decimal         @db.Decimal(12, 2)
  notes       String?
  raw         Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([policyId, effectiveAt])
  @@map("policy_endorsements")
}

model CommissionReceipt {
  id         String   @id @default(cuid())
  corretorId String
  corretor   Corretor @relation(fields: [corretorId], references: [id], onDelete: Cascade)

  paidAt    DateTime
  amount    Decimal  @db.Decimal(12, 2)
  currency  String   @default("BRL")
  method    String?
  reference String?
  notes     String?

  items CommissionReceiptItem[]

  createdAt DateTime @default(now())

  @@index([corretorId, paidAt])
  @@map("commission_receipts")
}

model CommissionReceiptItem {
  id        String            @id @default(cuid())
  receiptId String
  receipt   CommissionReceipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  accrualId String
  accrual   ComissaoLancamento @relation(fields: [accrualId], references: [id], onDelete: Cascade)

  amount Decimal @db.Decimal(12, 2)

  @@unique([receiptId, accrualId])
  @@index([accrualId])
  @@map("commission_receipt_items")
}

model ImportRun {
  id       String  @id @default(cuid())
  clientId String
  runId    String? @unique
  latest   Boolean @default(false)
  payload  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
